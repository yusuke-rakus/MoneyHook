<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.mapper.TransactionMapper">

	<!-- 収支を登録 -->
	<insert id="addTransaction"
		parameterType="com.example.form.AddTransactionForm">
		INSERT INTO
		transaction(
			user_no,
			transaction_name,
			transaction_amount,
			transaction_date,
			category_id,
			sub_category_id,
			fixed_flg
		)
		VALUES(
			#{userNo},
			#{transactionName},
			#{transactionAmount},
			#{transactionDate},
			#{categoryId},
			#{subCategoryId},
			#{fixedFlg}
		);
	</insert>
	
	<!-- 収支を削除 -->
	<delete id="deleteTransaction" parameterType="com.example.form.DeleteTransactionForm">
		DELETE FROM 
			transaction
		WHERE
			transaction_id = #{transactionId} AND user_no = #{userNo};
	</delete>
	
	<!-- 収支を編集 -->
	<update id="editTransaction">
		UPDATE
			transaction
		SET
			transaction_name=#{transactionName},
			transaction_amount=#{transactionAmount},
			transaction_date=#{transactionDate},
			category_id=#{categoryId},
			sub_category_id=#{subCategoryId},
			fixed_flg=#{fixedFlg}
		WHERE
			transaction_id=#{transactionId}
		AND
			user_no=#{userNo};
	</update>
	
	<!-- 収支詳細の取得 -->
	<select id="getTransaction" resultType="com.example.domain.Transaction">
		SELECT
			t.transaction_date,
			t.transaction_name,
			t.transaction_amount, 
			t.category_id,
			c.category_name,
			t.sub_category_id,
			sc.sub_category_name,
			t.fixed_flg
		FROM
			transaction t
		INNER JOIN category c ON c.category_id = t.category_id
		INNER JOIN sub_category sc ON sc.sub_category_id = t.sub_category_id
		WHERE t.user_no = #{userNo} AND t.transaction_id = #{transactionId};
	</select>
	
	<!-- ６ヶ月分の合計支出を取得 -->
	<resultMap type="com.example.domain.Transaction" id="getMonthlySpendingDataMap">
		<result column="month" property="month" />
		<result column="total_amount" property="totalAmount" />
	</resultMap>
	
	<!-- ６ヶ月分の合計支出を取得 -->
	<select id="getMonthlySpendingData" resultMap="getMonthlySpendingDataMap">
		SELECT
			DATE_FORMAT(transaction_date, "%m") as month,
			SUM(transaction_amount) as total_amount
		FROM
			transaction
		WHERE
			user_no = #{userNo}
		AND
			0 > transaction_amount
		AND
			transaction_date 
				BETWEEN DATE_SUB(#{month}, INTERVAL 5 MONTH)
				AND  DATE_ADD(#{month}, INTERVAL 1 MONTH)
		GROUP BY month
		LIMIT 6;
	</select>
	
	<!-- 月別固定収支を取得 -->
	<resultMap type="com.example.domain.MonthlyFixedList" id="monthlyFixedMap">
		<result column="category_name" property="categoryName" />
		<result column="total_category_Amount" property="totalCategoryAmount" />
		<collection property="transactionList" ofType="com.example.domain.Transaction">
			<result column="transaction_name" property="transactionName" />
			<result column="transaction_amount" property="transactionAmount" />
		</collection>
	</resultMap>
	
	<!-- 月別固定支出の取得 -->
	<select id="getMonthlyFixedSpending" resultMap="monthlyFixedMap">
		SELECT
			c.category_name,
			sum(t.transaction_amount) OVER(PARTITION BY c.category_name) as total_category_amount,
			t.transaction_name,
			t.transaction_amount
		FROM
			transaction t
		INNER JOIN category c ON c.category_id = t.category_id
		INNER JOIN sub_category sc ON sc.sub_category_id = t.sub_category_id
		WHERE
			t.user_no = #{userNo}
		AND
			t.transaction_date 
				BETWEEN #{month}
				AND  DATE_ADD(#{month}, INTERVAL 1 MONTH)
		AND
			0 > transaction_amount
		AND t.fixed_flg = true
		ORDER BY total_category_amount;
	</select>
	
	<!-- 月別固定収入の取得 -->
	<select id="getMonthlyFixedIncome" resultMap="monthlyFixedMap">
		SELECT
			c.category_name,
			sum(t.transaction_amount) OVER(PARTITION BY c.category_name) as total_category_amount,
			t.transaction_name,
			t.transaction_amount
		FROM
			transaction t
		INNER JOIN category c ON c.category_id = t.category_id
		INNER JOIN sub_category sc ON sc.sub_category_id = t.sub_category_id
		WHERE
			t.user_no = #{userNo}
		AND
			t.transaction_date 
				BETWEEN #{month}
				AND  DATE_ADD(#{month}, INTERVAL 1 MONTH)
		AND
			transaction_amount > 0
		AND t.fixed_flg = true
		ORDER BY total_category_amount;
	</select>
	
	<!-- 当月のTransactionデータを取得 -->
	<select id="getTimelineData" resultType="com.example.domain.Transaction">
		SELECT
			t.transaction_id,
			t.transaction_name,
			t.transaction_amount,
			t.transaction_date,
			c.category_name
		FROM
			transaction t
		INNER JOIN category c ON c.category_id = t.category_id
		WHERE user_no = #{userNo}
		AND 0 > t.transaction_amount
		AND t.transaction_date 
			BETWEEN #{month} AND  DATE_ADD(#{month}, INTERVAL 1 MONTH)
		ORDER BY t.transaction_date DESC;
	</select>
	
	<!-- ホーム画面情報の取得 -->
	<resultMap type="com.example.domain.CategoryList" id="getHomeMap">
		<result column="category_name" property="categoryName" />
		<result column="category_total_amount" property="categoryTotalAmount" />
		<collection property="subCategoryList" ofType="com.example.domain.Transaction">
			<result column="sub_category_name" property="subCategoryName" />
			<result column="sub_category_total_amount" property="subCategoryTotalAmount" />
		</collection>
	</resultMap>
	
	<!-- ホーム画面情報の取得 -->
	<select id="getHome" resultMap="getHomeMap">
		SELECT
			(select category_name from category where category_id = sub_tran.category_id) as category_name,
			sum(sub_tran.sub_category_total_amount) OVER(PARTITION BY sub_tran.category_id) as category_total_amount,
			sub_tran.sub_category_name,
			sub_tran.sub_category_total_amount
		FROM
			transaction t
		RIGHT JOIN (
				SELECT
					st.sub_category_id,
					ssc.category_id,
					ssc.sub_category_name,
					sum(st.transaction_amount) as sub_category_total_amount
				FROM transaction st
				INNER JOIN sub_category ssc ON ssc.sub_category_id = st.sub_category_id
				WHERE st.user_no = #{userNo}
				AND st.transaction_date BETWEEN #{month} AND  DATE_ADD(#{month}, INTERVAL 1 MONTH)
				GROUP BY st.sub_category_id
			) sub_tran ON sub_tran.sub_category_id = t.sub_category_id
		WHERE t.user_no = #{userNo}
			AND t.transaction_date BETWEEN #{month} AND  DATE_ADD(#{month}, INTERVAL 1 MONTH)
			AND 0 > t.transaction_amount
		group by t.sub_category_id
		ORDER BY
			category_total_amount,
			t.sub_category_id;
	</select>
	
	<!-- 指定月の変動費用・変動費合計を取得 -->
	<resultMap type="com.example.domain.CategoryList" id="getMonthlyVariableMap">
		<result column="category_name" property="categoryName" />
		<result column="category_total_amount" property="categoryTotalAmount" />
		<collection property="subCategoryList" ofType="com.example.domain.Transaction">
			<result column="sub_category_name" property="subCategoryName" />
			<result column="sub_category_total_amount" property="subCategoryTotalAmount" />
			<collection property="transactionList" ofType="com.example.domain.Transaction">
				<result column="transaction_id" property="transactionId" />
				<result column="transaction_name" property="transactionName" />
				<result column="transaction_amount" property="transactionAmount" />
			</collection>
		</collection>
	</resultMap>
	
	<!-- 指定月の変動費用・変動費合計を取得 -->
	<select id="getMonthlyVariableData" resultMap="getMonthlyVariableMap">
		SELECT
			c.category_name,
			SUM(t.transaction_amount) OVER(PARTITION BY c.category_name) AS category_total_amount,
			sub_clist.sub_category_name,
			sub_clist.sub_category_total_amount,
			tran_list.transaction_id,
			tran_list.transaction_name,
			tran_list.transaction_amount
		FROM transaction t
		INNER JOIN category c ON c.category_id = t.category_id
		RIGHT JOIN (
			SELECT transaction_id, transaction_name, transaction_amount
			FROM transaction
			WHERE user_no=#{userNo}
			AND transaction_date BETWEEN #{month} AND  DATE_ADD(#{month}, INTERVAL 1 MONTH)
			) tran_list ON tran_list.transaction_id = t.transaction_id
		RIGHT JOIN (
			SELECT t.sub_category_id, sc.sub_category_name, SUM(t.transaction_amount) AS sub_category_total_amount
			FROM transaction t
			INNER JOIN sub_category sc ON t.sub_category_id = sc.sub_category_id
			WHERE t.user_no=#{userNo}
			AND transaction_date BETWEEN #{month} AND DATE_ADD(#{month}, INTERVAL 1 MONTH)
			GROUP BY t.sub_category_id
			) sub_clist ON sub_clist.sub_category_id = t.sub_category_id
		WHERE t.user_no=#{userNo}
		AND transaction_date BETWEEN #{month} AND  DATE_ADD(#{month}, INTERVAL 1 MONTH)
		AND 0 > t.transaction_amount
		AND t.fixed_flg = false
		ORDER BY category_total_amount, sub_category_total_amount, transaction_amount;
	</select>
		
</mapper>